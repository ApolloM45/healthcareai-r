% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lasso-deployment.R
\docType{class}
\name{LassoDeployment}
\alias{LassoDeployment}
\title{Deploy a production-ready predictive Lasso model}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
LassoDeployment
}
\arguments{
\item{type}{The type of model (either 'regression' or 'classification')}

\item{df}{Dataframe whose columns are used for calc.}

\item{grainCol}{The dataframe's column that has IDs pertaining to the grain}

\item{testWindowCol}{This column dictates the split between model training and
test sets. Those rows with zeros in this column indicate the training set
while those that have ones indicate the test set}

\item{predictedCol}{Column that you want to predict.}

\item{impute}{For training df, set all-column imputation to F or T.
This uses mean replacement for numeric columns
and most frequent for factorized columns.
F leads to removal of rows containing NULLs.}

\item{debug}{Provides the user extended output to the console, in order
to monitor the calculations throughout. Use T or F.}
}
\description{
This step allows one to
\itemize{
\item Create a final model on all of your training data
\item Automatically save the model
\item Run the model against test data to generate predictions
\item Push these predictions to SQL Server
}
}
\examples{
#### Regression example using data from SQL Server ####
# This example requires
#     1) You set your working directory to source file location
#     2) To receive predictions from R back to SQL Server, you'll need to
#        save and run an entity in SAMD that has only the following columns

# GrainID decimal(38,0) not null, <--change col to match ID in summary table
# PredictedValueNBR decimal(38,2),
# Factor1TXT varchar(255),
# Factor2TXT varchar(255),
# Factor3TXT varchar(255),

# If you prefer to not use SAMD, execute this in SSMS to create output table:
# CREATE TABLE dbo.HCRDeployRegressionBASE(
#   BindingID float, BindingNM varchar(255), LastLoadDTS datetime2,
#   GrainID int <--change to match inputID, PredictedValueNBR decimal(38, 2),
#   Factor1TXT varchar(255), Factor2TXT varchar(255), Factor3TXT varchar(255)
# )

#setwd("C:/Yourscriptlocation/Useforwardslashes") # Encomment this command #
ptm <- proc.time()
library(HCRTools)

connection.string <- 'driver={SQL Server};
                      server=localhost;
                      database=SAM;
                      trusted_connection=true'

# Use this for an example SQL source:
# query <- "SELECT * FROM [SAM].[YourCoolSAM].[SomeTrainingSetTable]"
# df <- selectData(connection.string, query)

# Can delete these four lines when you set up your SQL connection/query
csvfile <- system.file("extdata", "HREmployeeDeploy.csv",package = "HCRTools")
df <- read.csv(file = csvfile,
                    header = TRUE,
                    na.strings = 'NULL')

head(df)

# Remove unnecessary columns
df <- subset(df, select = -c(SalariedFlag))

p <- SupervisedModelDeploymentParams$new()
p$type = 'regression'
p$df = df
p$grainCol = 'GrainID'
p$testWindowCol = 'InTestWindow'
p$predictedCol = 'VacationHours'
p$impute = TRUE
p$debug = TRUE
p$useSavedModel = FALSE
p$cores = 1
p$sqlConn = connection.string
p$destSchemaTable = 'dbo.HCRDeployRegressionBASE'

dL <- LassoDeployment$new(p)
dL$deploy()

print(proc.time() - ptm)

}
\seealso{
\code{\link{HCRTools}}
}
\keyword{datasets}

