% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/linear-mixed-model-development.R
\docType{class}
\name{LinearMixedModelDevelopment}
\alias{LinearMixedModelDevelopment}
\title{Compare predictive models, created on your data}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
LinearMixedModelDevelopment
}
\arguments{
\item{object}{of SuperviseModelParameters class for $new() constructor}

\item{type}{The type of model (either 'regression' or 'classification')}

\item{df}{Dataframe whose columns are used for calc.}

\item{grainCol}{The data frame's ID column pertaining to the grain}

\item{personCol}{The data frame's ID column pertaining to the person/patient}

\item{predictedCol}{Column that you want to predict.}

\item{impute}{Set all-column imputation to F or T.
This uses mean replacement for numeric columns
and most frequent for factorized columns.
F leads to removal of rows containing NULLs.}

\item{debug}{Provides the user extended output to the console, in order
to monitor the calculations throughout. Use T or F.}
}
\description{
This step allows one to create test models on your data
and helps determine which performs best.
}
\examples{

### Built-in example; Doing classification
library(HCRTools)
library(lme4)

df <- sleepstudy

str(df)

# Create binary column for classification
df$ReactionFLG <- ifelse(df$Reaction > 300, 'Y','N')
df$Reaction <- NULL

set.seed(42)
p <- SupervisedModelDevelopmentParams$new()
p$df = df
p$type = 'classification'
p$impute = TRUE
p$personCol = 'Subject' # Think of this as PatientID
p$predictedCol = 'ReactionFLG'
p$debug = FALSE
p$cores = 1

# Create Mixed Model
lmm <- LinearMixedModelDevelopment$new(p)
lmm$run()

### Doing regression
library(HCRTools)
library(lme4)

# SQL query and connection goes here - see SelectData function.

df <- sleepstudy

# Add GrainID, which is equivalent to PatientEncounterID
df$GrainID <- seq.int(nrow(df))

str(df)

set.seed(42)
p <- SupervisedModelDevelopmentParams$new()
p$df = df
p$type = 'regression'
p$impute = TRUE
p$grainCol = 'GrainID'  # Think of this as PatientEnounterID
p$personCol = 'Subject' # Think of this as PatientID
p$predictedCol = 'Reaction'
p$debug = TRUE
p$cores = 1

# Create Mixed Model
lmm <- LinearMixedModelDevelopment$new(p)
lmm$run()

#### Example using csv data ####
library(HCRTools)
#setwd("C:/Your/script/location") # Needed if using YOUR CSV file
ptm <- proc.time()

# Can delete this line in your work
csvfile <- system.file("extdata", "HCRHCRDiabetesClinical.csv", package = "HCRTools")

df <- read.csv(file = csvfile, #<-- Replace with 'your/path'
                    header = TRUE,
                    na.strings =  c('NULL', 'NA', ""))

head(df)

df$InTestWindowFLG <- NULL

set.seed(42)

p <- SupervisedModelDevelopmentParams$new()
p$df = df
p$type = 'classification'
p$impute = TRUE
p$grainCol = 'PatientEncounterID'
p$personCol = 'PatientID'
p$predictedCol = 'ThirtyDayReadmitFLG'
p$debug = FALSE
p$cores = 1

# Create Mixed Model
lmm <- LinearMixedModelDevelopment$new(p)
lmm$run()

# Run Lasso
Lasso <- LassoDevelopment$new(p)
Lasso$run()

# For a given true-positive rate, get false-pos rate and 0/1 cutoff
Lasso$getCutOffs(tpr=.8)
print(proc.time() - ptm)

#### Example using SQL Server data ####
# This example requires:
#    1) That your local SQL Server has AdventureWorks2012 installed

ptm <- proc.time()
library(HCRTools)

connection.string = "
driver={SQL Server};
server=localhost;
database=SAM;
trusted_connection=true
"

query = "
SELECT
 [PatientEncounterID]
,[PatientID]
,[SystolicBPNBR]
,[LDLNBR]
,[A1CNBR]
,[GenderFLG]
,[ThirtyDayReadmitFLG]
,[InTestWindowFLG]
FROM [SAM].[dbo].[HCRDiabetesClinical]
"

df <- selectData(connection.string, query)
head(df)

df$InTestWindowFLG <- NULL

set.seed(42)

p <- SupervisedModelDevelopmentParams$new()
p$df = df
p$type = 'classification'
p$impute = TRUE
p$grainCol = 'PatientEncounterID'
p$personCol = 'PatientID'
p$predictedCol = 'ThirtyDayReadmitFLG'
p$debug = FALSE
p$cores = 1

# Create Mixed Model
lmm <- LinearMixedModelDevelopment$new(p)
lmm$run()

# Run Lasso
Lasso <- LassoDevelopment$new(p)
Lasso$run()

# For a given true-positive rate, get false-pos rate and 0/1 cutoff
Lasso$getCutOffs(tpr=.8)

print(proc.time() - ptm)
}
\references{
\url{http://hctools.org/}
}
\seealso{
\code{\link{HCRTools}}
}
\keyword{datasets}

